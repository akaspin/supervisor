MAKE_DIR ?= .make

# all go sources in build tree excluding vendor
SOURCES ?= $(shell find . -type f \( -iname '*.go' \) -not \( -path "./vendor/*" -path ".*" \))

export GO111MODULE = on
export CGO_ENABLED ?= 0

# do not use automatic targets
.SUFFIXES:

all: lint test

###
### Maintenance
###

fmt: $(SOURCES)	## format go sources
	gofmt -w -s -l $^

mod-tidy:	## tidy go.mod
	go mod tidy
.NOTPARALLEL: mod-tidy
.PHONY: mod-tidy


###
### Tools and external binaries
###
### Use $(TOOL)/go/package as prerequisite. Requested tool will be
### installed automatically on demand.
### Use .bin-my-binary as prerequisite to assert required binary in path
###

TOOLS ?= $(MAKE_DIR)/.tools
$(TOOLS)/%:
	test -x "$@" || (mkdir -p /tmp/.INSTALL/$* && cd /tmp/.INSTALL/$* && echo "module toolchain" > go.mod && GOBIN=$(shell pwd)/$(dir $@) go get -u $* && rm -rf /tmp/.INSTALL/$*)

.bin-%:
	@test -x "$(shell which $*)" || (echo "binary $* not found" && exit 2)

clean::
	rm -rf $(TOOLS)


###
### Test
###

TESTS ?= .
TEST_TAGS ?=
TEST_ARGS ?=

test: $(SOURCES) go.mod	## regular tests
	go test $(TEST_ARGS) -tags="$(TEST_TAGS)" -run=$(TESTS) ./...

race: $(SOURCES) go.mod	## race tests
	CGO_ENABLED=1 go test $(TEST_ARGS) -tags="$(TEST_TAGS)" -race -run=$(TESTS) ./...

bench: $(SOURCES) go.mod	## benchmarks
	go test $(TEST_ARGS) -tags="$(TEST_TAGS)" -run=^$ -bench=$(TESTS) -benchmem -cpu 32 ./...

test-nocache: $(SOURCES) go.mod
	go test $(TEST_ARGS) -tags="$(TEST_TAGS)" -count=1 -run=$(TESTS) ./...

race-nocache: $(SOURCES) go.mod
	CGO_ENABLED=1 go test $(TEST_ARGS) -tags="$(TEST_TAGS)" -race -count=1 -run=$(TESTS) ./...


###
### Lint
###

lint:: \
	.lint-fmt \
	.lint-mod-tidy \
	.lint-mod-verify \
	.lint-vet

.lint-fmt: $(SOURCES) ## compare gofmt output
	@DIFF=`gofmt -s -d $^` && echo "$$DIFF" && test -z "$$DIFF"

.lint-vet: $(SOURCES) go.mod ## run vet
	go vet $(VET_FLAGS) ./...
.NOTPARALLEL: .lint-vet

.lint-mod-tidy:	## check go mod tidy is applied
	@rm -f go.sum /tmp/$(PROJECT).go.mod.tidy.bak /tmp/$(PROJECT).go.mod.tidy
	@cp go.mod /tmp/$(PROJECT).go.mod.tidy.bak
	@go mod tidy
	@mv go.mod /tmp/$(PROJECT).go.mod.tidy
	@mv /tmp/$(PROJECT).go.mod.tidy.bak go.mod
	diff go.mod /tmp/$(PROJECT).go.mod.tidy
.NOTPARALLEL: .lint-mod-tidy
.PHONY: .lint-mod-tidy

.lint-mod-verify:
	go mod verify

lint-mod-outdated:  ## check outdated deps
	@rm -f go.sum /tmp/$(PROJECT).go.mod.bak /tmp/$(PROJECT).go.mod.up
	@cp go.mod /tmp/$(PROJECT).go.mod.bak
	@go get -u
	@go mod tidy
	@mv go.mod /tmp/$(PROJECT).go.mod.up
	@mv /tmp/$(PROJECT).go.mod.bak go.mod
	diff go.mod /tmp/$(PROJECT).go.mod.up
.NOTPARALLEL: lint-mod-outdated
.PHONY: lint-mod-outdated

###
### Self update
###

make-go-update: .bin-tar .bin-curl .bin-env .bin-sh
	curl -sSL https://github.com/akaspin/make-go/raw/master/setup.sh | sh -
